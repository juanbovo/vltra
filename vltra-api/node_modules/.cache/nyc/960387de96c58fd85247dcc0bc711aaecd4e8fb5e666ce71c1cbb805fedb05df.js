var cov_l4ixa83e4=function(){var path="/Users/juampi/bootcamp/collab/skylab-bootcamp-201907/staff/juan-bovo/vltra/vltra-api/logic/post/delete-post/index.js";var hash="7f87b5f3722b2740323d4608d00ffe5642b00756";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/juampi/bootcamp/collab/skylab-bootcamp-201907/staff/juan-bovo/vltra/vltra-api/logic/post/delete-post/index.js",statementMap:{"0":{start:{line:1,column:35},end:{line:1,column:56}},"1":{start:{line:2,column:20},end:{line:2,column:42}},"2":{start:{line:12,column:0},end:{line:30,column:1}},"3":{start:{line:14,column:4},end:{line:14,column:39}},"4":{start:{line:15,column:4},end:{line:15,column:39}},"5":{start:{line:17,column:4},end:{line:29,column:8}},"6":{start:{line:18,column:21},end:{line:18,column:48}},"7":{start:{line:20,column:8},end:{line:20,column:71}},"8":{start:{line:20,column:19},end:{line:20,column:71}},"9":{start:{line:22,column:8},end:{line:22,column:114}},"10":{start:{line:22,column:47},end:{line:22,column:114}},"11":{start:{line:24,column:8},end:{line:24,column:46}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:12,column:17},end:{line:12,column:18}},loc:{start:{line:12,column:42},end:{line:30,column:1}},line:12},"1":{name:"(anonymous_1)",decl:{start:{line:17,column:12},end:{line:17,column:13}},loc:{start:{line:17,column:24},end:{line:29,column:5}},line:17}},branchMap:{"0":{loc:{start:{line:20,column:8},end:{line:20,column:71}},type:"if",locations:[{start:{line:20,column:8},end:{line:20,column:71}},{start:{line:20,column:8},end:{line:20,column:71}}],line:20},"1":{loc:{start:{line:22,column:8},end:{line:22,column:114}},type:"if",locations:[{start:{line:22,column:8},end:{line:22,column:114}},{start:{line:22,column:8},end:{line:22,column:114}}],line:22}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"7f87b5f3722b2740323d4608d00ffe5642b00756"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const{models:{User,Post}}=(cov_l4ixa83e4.s[0]++,require('vltra-data'));const{validate}=(cov_l4ixa83e4.s[1]++,require('vltra-utils'));/**
 * Deletes a post
 * @param {objectId} postId mongoose post id to delete
 * @param {objectId} userId mongoose user id to check post ownership
 * 
 * @returns {Promise} post deletion on db
 */cov_l4ixa83e4.s[2]++;module.exports=function(userId,postId){cov_l4ixa83e4.f[0]++;cov_l4ixa83e4.s[3]++;validate.objectId(userId,'userId');cov_l4ixa83e4.s[4]++;validate.objectId(postId,'postId');cov_l4ixa83e4.s[5]++;return(async()=>{cov_l4ixa83e4.f[1]++;const post=(cov_l4ixa83e4.s[6]++,await Post.findById(postId));cov_l4ixa83e4.s[7]++;if(!post){cov_l4ixa83e4.b[0][0]++;cov_l4ixa83e4.s[8]++;throw Error(`post with id ${postId} does not exist`);}else{cov_l4ixa83e4.b[0][1]++;}cov_l4ixa83e4.s[9]++;if(post.author.toString()!==userId){cov_l4ixa83e4.b[1][0]++;cov_l4ixa83e4.s[10]++;throw Error(`postId ${postId} does not belong to userId ${userId}`);}else{cov_l4ixa83e4.b[1][1]++;}cov_l4ixa83e4.s[11]++;await Post.deleteOne({_id:postId});//const postToDelete = await Post.deleteOne({ _id : postId })
//if (!postToDelete.deletedCount) throw Error(`post with id ${postId} does not exist`)
})();};