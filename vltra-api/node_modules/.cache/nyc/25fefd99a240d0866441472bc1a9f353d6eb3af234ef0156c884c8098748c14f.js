var cov_txdumf43k=function(){var path="/Users/juampi/bootcamp/collab/skylab-bootcamp-201907/staff/juan-bovo/vltra/vltra-api/logic/user/update-user/index.js";var hash="c8917cfc8bc0175bae224fcff70787094c53e08d";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/juampi/bootcamp/collab/skylab-bootcamp-201907/staff/juan-bovo/vltra/vltra-api/logic/user/update-user/index.js",statementMap:{"0":{start:{line:1,column:29},end:{line:1,column:50}},"1":{start:{line:2,column:20},end:{line:2,column:42}},"2":{start:{line:12,column:0},end:{line:25,column:1}},"3":{start:{line:13,column:4},end:{line:13,column:29}},"4":{start:{line:14,column:4},end:{line:14,column:33}},"5":{start:{line:21,column:8},end:{line:24,column:12}},"6":{start:{line:22,column:27},end:{line:22,column:75}},"7":{start:{line:23,column:12},end:{line:23,column:77}},"8":{start:{line:23,column:25},end:{line:23,column:77}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:12,column:17},end:{line:12,column:18}},loc:{start:{line:12,column:37},end:{line:25,column:1}},line:12},"1":{name:"(anonymous_1)",decl:{start:{line:21,column:15},end:{line:21,column:16}},loc:{start:{line:21,column:25},end:{line:24,column:9}},line:21}},branchMap:{"0":{loc:{start:{line:23,column:12},end:{line:23,column:77}},type:"if",locations:[{start:{line:23,column:12},end:{line:23,column:77}},{start:{line:23,column:12},end:{line:23,column:77}}],line:23}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},f:{"0":0,"1":0},b:{"0":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"c8917cfc8bc0175bae224fcff70787094c53e08d"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const{models:{User}}=(cov_txdumf43k.s[0]++,require('vltra-data'));const{validate}=(cov_txdumf43k.s[1]++,require('vltra-utils'));/**
 * Updates a user.
 * 
 * @param {string} id
 * @param {Object} data
 * 
 * @returns {Promise}
 */cov_txdumf43k.s[2]++;module.exports=function(id,data){cov_txdumf43k.f[0]++;cov_txdumf43k.s[3]++;validate.string(id,'id');cov_txdumf43k.s[4]++;validate.object(data,'body');// Inadequate solution
/* return this.__users__.updateOne({ _id: ObjectId(id) }, { $set: data })
        .then(result => {
            if (!result.result.nModified) throw new Error(`user with id ${id} does not exist`)
        }) */cov_txdumf43k.s[5]++;return(async()=>{cov_txdumf43k.f[1]++;const result=(cov_txdumf43k.s[6]++,await User.findByIdAndUpdate(id,{$set:data}));cov_txdumf43k.s[7]++;if(!result){cov_txdumf43k.b[0][0]++;cov_txdumf43k.s[8]++;throw new Error(`user with id ${id} does not exist`);}else{cov_txdumf43k.b[0][1]++;}})();};// Alternative function
/* updateUser(email, name, surname, password) {

    validate.string(name, 'name')
    validate.string(surname, 'surname')
    validate.string(email, 'email')
    validate.string(password, 'password')

    return this.__users__.findOneAndUpdate({ email }, { $set: { name, surname, password } })
      .then((response) =>{
          if(response.value == null) throw new Error (`error`)
          else
          return response
      })
      
  } */