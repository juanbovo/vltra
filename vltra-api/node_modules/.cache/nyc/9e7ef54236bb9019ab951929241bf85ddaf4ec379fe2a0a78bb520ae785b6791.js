var cov_1vjp847iy9=function(){var path="/Users/juampi/bootcamp/collab/skylab-bootcamp-201907/staff/juan-bovo/vltra/vltra-api/logic/comment/retrieve-post-comments/index.js";var hash="23004169a8f4edec2789fc8b101fc2ed62017abb";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/juampi/bootcamp/collab/skylab-bootcamp-201907/staff/juan-bovo/vltra/vltra-api/logic/comment/retrieve-post-comments/index.js",statementMap:{"0":{start:{line:1,column:43},end:{line:1,column:64}},"1":{start:{line:2,column:20},end:{line:2,column:42}},"2":{start:{line:11,column:0},end:{line:25,column:1}},"3":{start:{line:12,column:4},end:{line:12,column:39}},"4":{start:{line:14,column:17},end:{line:14,column:77}},"5":{start:{line:16,column:4},end:{line:16,column:66}},"6":{start:{line:16,column:14},end:{line:16,column:66}},"7":{start:{line:18,column:4},end:{line:21,column:6}},"8":{start:{line:19,column:8},end:{line:19,column:32}},"9":{start:{line:20,column:8},end:{line:20,column:26}},"10":{start:{line:24,column:4},end:{line:24,column:24}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:11,column:17},end:{line:11,column:18}},loc:{start:{line:11,column:39},end:{line:25,column:1}},line:11},"1":{name:"(anonymous_1)",decl:{start:{line:18,column:26},end:{line:18,column:27}},loc:{start:{line:18,column:37},end:{line:21,column:5}},line:18}},branchMap:{"0":{loc:{start:{line:16,column:4},end:{line:16,column:66}},type:"if",locations:[{start:{line:16,column:4},end:{line:16,column:66}},{start:{line:16,column:4},end:{line:16,column:66}}],line:16}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},f:{"0":0,"1":0},b:{"0":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"23004169a8f4edec2789fc8b101fc2ed62017abb"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const{models:{User,Post,Comment}}=(cov_1vjp847iy9.s[0]++,require('vltra-data'));const{validate}=(cov_1vjp847iy9.s[1]++,require('vltra-utils'));/**
 * Retrieves all the comments for a post
 * @param {objectId} postId mongoose post id to retrieve comments from
 * 
 * @returns {Array} array with requested comments' ids
 */cov_1vjp847iy9.s[2]++;module.exports=async function(postId){cov_1vjp847iy9.f[0]++;cov_1vjp847iy9.s[3]++;validate.objectId(postId,'postId');const post=(cov_1vjp847iy9.s[4]++,await Post.findOne({_id:postId},{_id:0,__v:0}).lean());cov_1vjp847iy9.s[5]++;if(!post){cov_1vjp847iy9.b[0][0]++;cov_1vjp847iy9.s[6]++;throw Error(`post with id ${postId} does not exist`);}else{cov_1vjp847iy9.b[0][1]++;}cov_1vjp847iy9.s[7]++;post.comments.forEach(comment=>{cov_1vjp847iy9.f[1]++;cov_1vjp847iy9.s[8]++;comment.id=comment._id;cov_1vjp847iy9.s[9]++;delete comment._id;});cov_1vjp847iy9.s[10]++;return post.comments;};